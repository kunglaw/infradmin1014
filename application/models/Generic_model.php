<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/**
 * Place for generic database function all around the model class.
 *
 * @property CI_Loader $load
 * @property CI_DB_active_record $db
 * @property CI_DB_active_record $_current_db
 *
 * @version 1.3
 * @copyright PT. Badr Interactive (c) 2015
 * @author pulung
 */
class Generic_model extends CI_Model {

    // current database object used
    private $_current_db = NULL;

    /**
     * Load database with database name options
     * @param string $database_name
     */
    public function __construct($database_name = "") {

        $this->_current_db = $this->load->database($database_name, TRUE);

        // set timezone for further db query.
        $this->_current_db->query("SET time_zone = '+7:00'");
    }

    /**
     * Create new element in $table with $configuration parameter.
     * @param string $table table name
     * @param array $configuration array contains row data to be inserted in $table
     * @return number just created row ID.
     */
    public function create($table="", $configuration=array()) {

        // check if table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            return -1;
        }

        $this->_current_db->insert($table, $configuration);

        // return ID generated by auto-increment last insert.
        return $this->_current_db->insert_id();
    }

    /**
     * Insert lots of entry at once.
     *
     * @param string $table
     * @param array $batch
     * @return CI_DB_active_record|int
     */
    public function create_batch($table="", $batch=array()) {

        // check if table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            return -1;
        }

        // insert lots of entry at once.
        return $this->_current_db->insert_batch($table, $batch);
    }

    /**
     * Retrieve one row from table $table by given $criteria.
     * @param string $table table name
     * @param array $criteria criteria for retrieving data.
     * @param array $order_criteria
     * @param string $selected
     * @return mixed result in one row in one dimensional array.
     */
    public function retrieve_one($table="", $criteria=array(), $order_criteria=array(), $selected="*") {

        // check if table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
			
        }

        $this->_current_db->select($selected);
        $this->_current_db->where($criteria);

        foreach($order_criteria as $field => $order) {
            $this->_current_db->order_by($field, $order);
        }

        $query = $this->_current_db->get($table);
        return $query->row_array();
    }

    /**
     * Retrieve rows from given parameter.
     * @param string $table table name
     * @param array $criteria criteria for retrieving data.
     * @param array $order_criteria array of field => order (ascending or descending)
     * @param string $length length of row retrieved.
     * @param string $offset retrieval starting point.
     * @return result in several row in two dimensional array.
     */
    public function retrieve_many($table="", $criteria=array(),
                                  $order_criteria=array(), $length=NULL, $offset=NULL) {

        // check if table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        $this->_current_db->where($criteria);

        foreach($order_criteria as $field => $order) {
            $this->_current_db->order_by($field, $order);
        }

        if (($length != NULL) && ($offset != NULL)) {
            $query = $this->_current_db->get($table, $length, $offset);
        } else {
            $query = $this->_current_db->get($table);
        }

        return $query->result_array();
    }

    /**
     * Retrieve rows with selected fields from given parameter.
     * @param string $table table name
     * @param array $criteria criteria for retrieving data.
     * @param string $selected selected field, separated by comma ','
     * @param array $order_criteria array of field => order (ascending or descending)
     * @param string $length length of row retrieved.
     * @param string $offset retrieval starting point.
     * @return result in several row in two dimensional array.
     */
    public function retrieve_many_with_selection($table="", $criteria=array(),
                                                 $selected="*", $order_criteria=array(), $length=NULL, $offset=NULL) {

        // check if table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        $this->_current_db->select($selected); // select the fields
        $this->_current_db->where($criteria); // set the criteria for rows.

        // set the order (asc or desc) for retrieval
        foreach($order_criteria as $field => $order) {
            $this->_current_db->order_by($field, $order);
        }

        // arrange the length of retrieved row and where to start retrieve it.
        if ($length && $offset) {
            $query = $this->_current_db->get($table, $length, $offset);
        } else {
            $query = $this->_current_db->get($table);
        }

        return $query->result_array();
    }

    /**
     * Retrieve rows by list of data using "where in" operation.
     *
     * @param string $table
     * @param string $field_name
     * @param array $data_list
     * @param array $order_criteria
     * @param null $length
     * @param null $offset
     * @return null
     */
    public function retrieve_many_in_list($table="", $field_name="id", $data_list=array(),
                                          $order_criteria=array(), $length=NULL, $offset=NULL) {

        // check if table exist in db.
        if (!$this->_current_db->table_exists($table) || empty($data_list)) {
			// kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				log_message("debug", "XXX: Table is not exist or data list is empty");
            	return array();
			}
            
        }

        $this->_current_db->where_in($field_name, $data_list);

        foreach($order_criteria as $field => $order) {
            $this->_current_db->order_by($field, $order);
        }

        if ($length && $offset) {
            $query = $this->_current_db->get($table, $length, $offset);
        } else {
            $query = $this->_current_db->get($table);
        }

        return $query->result_array();
    }

    /**
     *
     * @param string $primary_table primary table name to be joined.
     * @param array $criteria criteria for primary table
     * @param array $table_refid array (foreign table name => reference ID  on foreign table)
     * @param string $selected selected field from joined table, concat in a string, separated with comma.
     * @param array $alias_in_primary alias name for foreign field in primary table.
     * @param array $order_criteria data order
     * @param string $length length of data
     * @param string $offset offset of data
     */
    public function retrieve_joined($primary_table="", $criteria=array(),
                                    $table_refid=array(), $selected="", $alias_in_primary=array(),
                                    $order_criteria=array(), $length=NULL, $offset=NULL, $group_by="", $join_type="left") {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($primary_table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        $this->_current_db->select($selected);
        $this->_current_db->from($primary_table);
        $this->_current_db->where($criteria);

        foreach($table_refid as $foreign_table => $reference_id) {

            // check if foreign table exist in db.
            if (!$this->_current_db->table_exists($foreign_table)) {
                continue; // continue joining another table.
            }

            // if $foreign table index hasn't SET at all, and if that index is SET to null
            if (isset($alias_in_primary[$foreign_table]) && $alias_in_primary[$foreign_table]) {

                $this->_current_db->join($foreign_table, $foreign_table .".". $reference_id ."=".
                    $primary_table .".". $alias_in_primary[$foreign_table], $join_type);

            } else {

                $this->_current_db->join($foreign_table, $foreign_table .".". $reference_id ."=".
                    $primary_table .".". $foreign_table ."_". $reference_id, $join_type);
            }

        }

        foreach($order_criteria as $field => $order) {
            $this->_current_db->order_by($field, $order);
        }

        if($group_by != "") {
            $this->_current_db->group_by($group_by);
        }

        if ($length && $offset) {
            $this->_current_db->limit($length, $offset);
        }

        $query = $this->_current_db->get();
        return $query->result_array();
    }

    /**
     * Update data in a table named $table,
     * with update data $configuration, with $where_criteria for where operation.
     *
     * @param string $table table name
     * @param array $configuration things to be updated.
     * @param array $where_criteria where operation criteria.
     * @return CI_DB_active_record|null
     */
    public function update($table="", $configuration=array(), $where_criteria=array()) {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        $this->_current_db->where($where_criteria);
        return $this->_current_db->update($table, $configuration);
    }

    /**
     * Update the table with transaction capabilities.
     * @param string $table table name.
     * @param array $configuration configuration updated field.
     * @param array $where_criteria criteria for where operation.
     */
    public function update_with_transaction($table="",
                                            $configuration=array(), $where_criteria=array()) {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        // prepare the select statement + FOR UPDATE
        $select_string = "SELECT ";

        $counter = 0;
        foreach($configuration as $key => $value) {
            $select_string .= $this->_current_db->escape($key);

            // separate selected field with commas except the last one.
            if ($counter < count($configuration) - 1) {
                $select_string .= ", ";
            }
            $counter++;
        }

        $select_string .= " FOR UPDATE;";

        // prepare the update string.
        $update_string = $this->_current_db->update_string($table, $configuration, $where_criteria);

        $this->_current_db->trans_start();

        $this->_current_db->query($select_string);
        $this->_current_db->query($update_string);

        $this->_current_db->trans_complete();
    }

    /**
     * Delete element from $table according to its $id.
     * @param $table table name
     * @param $id element ID
     */
    public function delete_one($table="", $where_criteria=array()) {

        $this->delete($table, $where_criteria);
    }

    /**
     * Delete element from $table according to its $id.
     * @param $table table name
     * @param $where_criteria element criteria.
     */
    public function delete($table="", $where_criteria=array()) {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        $this->_current_db->where($where_criteria);
        $this->_current_db->delete($table);
    }

    /**
     * Delete many element from checkboxed row in list
     * @param $table table name
     * @param $ids element-element ID
     */
    public function delete_many($table="", $ids=array(), $reference_field="id") {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        $this->_current_db->where_in($reference_field, $ids);
        $this->_current_db->delete($table);
    }

    /**
     * Search element of $table using $criteria, by LIKE operator.
     * @param string $table table name.
     * @param array $criteria list of criteria.
     */
    public function search($table="", $like_criteria=array(), $where_criteria=array(),
                           $order_criteria=array(), $length=NULL, $offset=NULL, $selected="*") {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        $this->_current_db->select($selected);

        $this->_current_db->like($like_criteria);
        $this->_current_db->where($where_criteria);

        foreach($order_criteria as $field => $order) {
            $this->_current_db->order_by($field, $order);
        }

        if ($length && $offset) {
            $query = $this->_current_db->get($table, $length, $offset);
        } else {
            $query = $this->_current_db->get($table);
        }

        return $query->result_array();
    }

    /**
     * Search element of $table using $criteria, by LIKE operator.
     * @param string $table table name.
     * @param array $criteria list of criteria.
     */
    public function search_joined($primary_table="", $like_criteria=array(), $where_criteria=array(),
                                  $table_refid=array(), $alias_in_primary=array(),
                                  $order_criteria=array(), $length=NULL, $offset=NULL, $selected="*") {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($primary_table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return NULL;
			}
        }

        $this->_current_db->select($selected);

        $this->_current_db->like($like_criteria);
        $this->_current_db->where($where_criteria);

        foreach($table_refid as $foreign_table => $reference_id) {

            // check if foreign table exist in db.
            if (!$this->_current_db->table_exists($foreign_table)) {
                continue; // continue joining another table.
            }

            // if $foreign table index hasn't SET at all, and if that index is SET to null
            if (isset($alias_in_primary[$foreign_table]) && $alias_in_primary[$foreign_table]) {

                $this->_current_db->join($foreign_table, $foreign_table .".". $reference_id ."=".
                    $primary_table .".". $alias_in_primary[$foreign_table], "left");

            } else {

                $this->_current_db->join($foreign_table, $foreign_table .".". $reference_id ."=".
                    $primary_table .".". $foreign_table ."_". $reference_id, "left");
            }

        }

        foreach($order_criteria as $field => $order) {
            $this->_current_db->order_by($field, $order);
        }

        if ($length && $offset) {
            $query = $this->_current_db->get($primary_table, $length, $offset);
        } else {
            $query = $this->_current_db->get($primary_table);
        }

        return $query->result_array();
    }

    /**
     * Get total rows from given query.
     * @param string $table table name.
     * @param array $where_criteria where criteria.
     * @param array $like_criteria like criteria.
     */
    public function get_total_rows($table="", $where_criteria=array(),
                                   $like_criteria=array()) {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($table)) {
           // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return -1;
			}
        }

        $this->_current_db->where($where_criteria);
        $this->_current_db->like($like_criteria);
        $this->_current_db->from($table);

        return $this->_current_db->count_all_results();
    }

    /**
     * Total column retrieved.
     *
     * @param string $table
     * @param array $criteria
     * @param string $column_name
     * @return int
     */
    public function sum_of_column($table="", $criteria=array(),
                                  $column_name="") {

        // check if primary table exist in db.
        if (!$this->_current_db->table_exists($table)) {
            // kunglaw edit
			$this->_current_db = $this->load->database(DB2_GROUP, TRUE);
			if(!$this->_current_db->table_exists($table))
			{
				return -1;
			}
        }

        $this->_current_db->select("SUM(". $column_name .") AS ". $column_name ."_total");
        $this->_current_db->where($criteria);
        $query = $this->_current_db->get($table);
        $total_array = $query->row_array();

        $result = $total_array[$column_name ."_total"];

        if ($result == "") {
            $result = 0;
        }

        return $result;
    }

    /**
     * Retrieve first column on $table
     *
     * @param $table
     * @return string
     */
    public function primary($table) {
        return $this->_current_db->primary($table);
    }

    /**
     * Get current table memory usage.
     *
     * @param $schema
     * @return mixed
     */
    public function get_memory_info($schema) {

//        $query = $this->_current_db->query(
//            'SELECT
//                table_name,
//                (data_length + index_length) / 1024 / 1024 "size"
//
//            FROM information_schema.TABLES
//            WHERE table_schema = "'. $schema .'"
//        ');
	
		$this->db = $this->load->database(DB_GROUP,true);
		
        $result = array();

        // retrieve table memory usage
        $this->db->select("table_name, (data_length + index_length) / 1024 / 1024 AS size");
        $this->db->from("information_schema.TABLES");
        $this->db->where("table_schema", $schema);

        $query = $this->db->get();
        $result["table"] = $query->result_array();

        // retrieve database memory usage
        $this->db->select("table_schema, SUM(data_length + index_length) / 1024 / 1024 AS size");
        $this->db->from("information_schema.TABLES");
        $this->db->where("table_schema", $schema);
        $this->db->group_by("table_schema");

        $query = $this->db->get();
        $result["database"] = $query->row_array();
		/* print_r($this->_current_db);
		echo "<hr>";
		print_r($this->db);
		echo "<hr>";*/
		/* print_r($result);
		echo "<hr>";
		$result = var_dump($this->db);*/
        return $result;
    }
}